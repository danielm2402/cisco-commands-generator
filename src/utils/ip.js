
export const prefijos = {
    32: '255.255.255.255',
    31: '255.255.255.254',
    30: '255.255.255.252',
    29: '255.255.255.248',
    28: '255.255.255.240',
    27: '255.255.255.224',
    26: '255.255.255.192',
    25: '255.255.255.128',
    24: '255.255.255.0',
    23: '255.255.254.0',
    22: '255.255.252.0',
    21: '255.255.248.0',
    20: '255.255.240.0',
    19: '255.255.224.0',
    18: '255.255.192.0',
    17: '255.255.128.0',
    16: '255.255.0.0',
    15: '255.254.0.0',
    14: '255.252.0.0',
    13: '255.248.0.0',
    12: '255.240.0.0',
    11: '255.224.0.0',
    10: '255.192.0.0',
    9: '255.128.0.0',
    8: '255.0.0.0',
    7: '254.0.0.0',
    6: '252.0.0.0',
    5: '248.0.0.0',
    4: '240.0.0.0',
    3: '224.0.0.0',
    2: '192.0.0.0',
    1: '128.0.0.0',
}

export const wildcard = {
    30: '0.0.0.3',
    29: '0.0.0.7',
    28: '0.0.0.15',
    27: '0.0.0.31',
    26: '0.0.0.63',
    25: '0.0.0.127',
    24: '0.0.0.255',
    23: '0.0.1.255',
    22: '0.0.3.255',
    21: '0.0.7.255',
    20: '0.0.15.255',
    19: '0.0.31.255',
    18: '0.0.63.255',
    17: '0.0.127.255',
    16: '0.0.255.255',
    15: '0.1.255.255',
    14: '0.3.255.255',
    13: '0.7.255.255',
    12: '0.15.255.255',
    11: '0.31.255.255',
    10: '0.63.255.255',
    9: '0.127.255.255',
    8: '0.255.255.255',
    7: '1.255.255.255',
    6: '3.255.255.255',
    5: '7.255.255.255',
    4: '15.255.255.255',
    3: '31.255.255.255',
    2: '63.255.255.255',
    1: '127.255.255.255',
}

export function ValidateIPaddress(ipaddress) {
    if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ipaddress)) {
        return (true)
    }
    return (false)
}

export const convertToBinary = (number) => {
    let num = number;
    let binary = (num % 2).toString();
    for (; num > 1;) {
        num = parseInt(num / 2);
        binary = (num % 2) + (binary);
    }

    const countDig = 8 - binary.toString().length
    let newBi = binary.toString()
    for (let index = 0; index < countDig; index++) {
        newBi = '0' + newBi
    }
    return newBi
}
  
  export function binaryToDecimal(num) {
    let sum = 0;

    for (let i = 0; i < num.length; i++) {
        sum += +num[i] * 2 ** (num.length - 1 - i);
    }
    return sum;
}
